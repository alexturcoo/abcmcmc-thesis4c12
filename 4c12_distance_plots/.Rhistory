plot(gd_out, show = "heterozygosity", pause = 0)
gd_out <- genetic.drift(p0 = 0.5, Ne = 100, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
gd_out <- genetic.drift(p0 = 0.5, Ne = 1000, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
gd_out <- genetic.drift(p0 = 1/2*Ne, Ne = 1000, nrep = 30, time = 100)
gd_out <- genetic.drift(p0 = 1/2000, Ne = 1000, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
gd_out <- genetic.drift(p0 = 1/2000, Ne = 10, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
gd_out <- genetic.drift(p0 = 1/2000, Ne = 20, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
gd_out <- genetic.drift(Ne = 20, p0 = 1/(2*Ne), nrep = 30, time = 100)
gd_out <- genetic.drift(Ne = 20, p0 = 1/40, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
### Ne = 10
gd_out <- genetic.drift(Ne = 10, p0 = 1/20, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
### Ne = 10
gd_out <- genetic.drift(Ne = 10, p0 = 1/20, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
### Ne = 100
gd_out <- genetic.drift(Ne = 100, p0 = 1/200, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
### Ne = 100
gd_out <- genetic.drift(Ne = 1000, p0 = 1/2000, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
### Ne = 10
gd_out <- genetic.drift(Ne = 10, p0 = 1/20, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
### Ne = 50
gd_out <- genetic.drift(Ne = 50, p0 = 1/100, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
### Ne = 10
gd_out <- genetic.drift(Ne = 10, p0 = 1/20, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
### Ne = 10
gd_out <- genetic.drift(Ne = 5, p0 = 1/10, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
### Ne = 10
gd_out <- genetic.drift(Ne = 10, p0 = 1/20, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
### Ne = 20
gd_out <- genetic.drift(Ne = 100, p0 = 1/200, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
### Ne = 50
gd_out <- genetic.drift(Ne = 1000, p0 = 1/2000, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
### Ne = 10
gd_out <- genetic.drift(Ne = 10, p0 = 1/20, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
### Ne = 20
gd_out <- genetic.drift(Ne = 100, p0 = 1/200, nrep = 30, time = 100)
plot(gd_out, show = "p", pause = 0.01)
#plot(gd_out, show = "fixed", pause = 0)
plot(gd_out, show = "heterozygosity", pause = 0)
drift_selection_p <- drift.selection(p0 = (1/(2*200)), Ne = 200,
w = c(1, 1, 0.95),
ngen = 500, nrep = 100)
drift_selection_p <- drift.selection(p0 = (1/(2*200)), Ne = 200,
w = c(1, 1, 0.95),
ngen = 500, nrep = 100)
drift_selection_p <- drift.selection(p0 = (1/(2*200)), Ne = 200,
w = c(1, 1, 0.95),
ngen = 500, nrep = 100)
allele_freq_min <- sapply(drift_selection_p, min)
sum(allele_freq_min == 0)/ length(allele_freq_min)
allele_freq_min <- sapply(drift_selection_p, min)
sum(allele_freq_min == 0)/ length(allele_freq_min)
allele_freq_min <- sapply(drift_selection_p, min)
sum(allele_freq_min == 0)/ length(allele_freq_min)
allele_freq_min <- sapply(drift_selection_p, min)
sum(allele_freq_min == 0)/ length(allele_freq_min)
```{r}
drift_selection_p <- drift.selection(p0 = (1/(2*200)), Ne = 200,
w = c(1, 1, 0.95),
ngen = 500, nrep = 100)
drift_selection_p <- drift.selection(p0 = (1/(2*200)), Ne = 200,
w = c(1, 1, 0.95),
ngen = 500, nrep = 100)
drift_selection_p <- drift.selection(p0 = (1/(2*200)), Ne = 200,
w = c(1, 1, 0.95),
ngen = 500, nrep = 100)
allele_freq_min <- sapply(drift_selection_p, min)
sum(allele_freq_min == 0)/ length(allele_freq_min)
allele_freq_max <- sapply(drift_selection_p, max)
sum(allele_freq_max == 1)/ length(allele_freq_max)
prob_fix <- function(p0, Ne, s, h) {
p_fix <- (1 - exp(-4*Ne*s*h*p0)) / (1 - exp(-4*Ne*h*s))
p_fix_neutral <- p0
Nsh <- Ne*s*h
c(Nsh = Nsh ,
p_fix = p_fix,
neutral = p_fix_neutral,
fix_ratio = (p_fix/p_fix_neutral))
}
prob_fix <- function(p0, Ne, s, h) {
p_fix <- (1 - exp(-4*Ne*s*h*p0)) / (1 - exp(-4*Ne*h*s))
p_fix_neutral <- p0
Nsh <- Ne*s*h
c(Nsh = Nsh ,
p_fix = p_fix,
neutral = p_fix_neutral,
fix_ratio = (p_fix/p_fix_neutral))
}
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
prob_fix_integral <- function(p0 = (1/(2*1000)), Ne = 1000, s = 0.001, h = 0.5) {
integrand_probs  <- function(p) {exp(-4*Ne*h*s*p)}
integrand_num <- integrate(integrand_probs, lower = 0, upper = p0) # numerator
integrand_denom <- integrate(integrand_probs, lower = 0, upper = 1) # denominator
p_fix <- integrand_num$value/integrand_denom$value  # just computing the ratio
return(p_fix)
}
prob_fix_integral <- function(p0 = (1/(2*1000)), Ne = 1000, s = 0.001, h = 0.5) {
integrand_probs  <- function(p) {exp(-4*Ne*h*s*p)}
integrand_num <- integrate(integrand_probs, lower = 0, upper = p0) # numerator
integrand_denom <- integrate(integrand_probs, lower = 0, upper = 1) # denominator
p_fix <- integrand_num$value/integrand_denom$value  # just computing the ratio
return(p_fix)
}
prob_fix_integral <- function(p0 = (1/(2*1000)), Ne = 1000, s = 0.001, h = 0.5) {
integrand_probs  <- function(p) {exp(-4*Ne*h*s*p)}
integrand_num <- integrate(integrand_probs, lower = 0, upper = p0) # numerator
integrand_denom <- integrate(integrand_probs, lower = 0, upper = 1) # denominator
p_fix <- integrand_num$value/integrand_denom$value  # just computing the ratio
return(p_fix)
}
prob_fix_integral <- function(p0 = (1/(2*1000)), Ne = 1000, s = 0.001, h = 0.5) {
integrand_probs  <- function(p) {exp(-4*Ne*h*s*p)}
integrand_num <- integrate(integrand_probs, lower = 0, upper = p0) # numerator
integrand_denom <- integrate(integrand_probs, lower = 0, upper = 1) # denominator
p_fix <- integrand_num$value/integrand_denom$value  # just computing the ratio
return(p_fix)
}
prob_fix_integral <- function(p0 = (1/(2*1000)), Ne = 1000, s = 0.001, h = 0.5) {
integrand_probs  <- function(p) {exp(-4*Ne*h*s*p)}
integrand_num <- integrate(integrand_probs, lower = 0, upper = p0) # numerator
integrand_denom <- integrate(integrand_probs, lower = 0, upper = 1) # denominator
p_fix <- integrand_num$value/integrand_denom$value  # just computing the ratio
return(p_fix)
}
prob_fix_integral <- function(p0 = (1/(2*1000)), Ne = 1000, s = 0.001, h = 0.5) {
integrand_probs  <- function(p) {exp(-4*Ne*h*s*p)}
integrand_num <- integrate(integrand_probs, lower = 0, upper = p0) # numerator
integrand_denom <- integrate(integrand_probs, lower = 0, upper = 1) # denominator
p_fix <- integrand_num$value/integrand_denom$value  # just computing the ratio
return(p_fix)
}
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
prob_fix_integral <- function(p0 = (1/(2*1000)), Ne = 1000, s = 0.001, h = 0.5) {
integrand_probs  <- function(p) {exp(-4*Ne*h*s*p)}
integrand_num <- integrate(integrand_probs, lower = 0, upper = p0) # numerator
integrand_denom <- integrate(integrand_probs, lower = 0, upper = 1) # denominator
p_fix <- integrand_num$value/integrand_denom$value  # just computing the ratio
return(p_fix)
}
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.001, s = 0.1)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.001, s = 0.1)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.001, s = 0.1)
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.001, s = 0.1)
knitr::opts_chunk$set(echo = TRUE)
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
pf_out <- prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
plot(pf_out, show = "p", pause = 0.01)
pf_out <- prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
plot(pf_out, show = "p", pause = 0)
pf_out <- prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
plot(, show = "p", pause = 0)
pf_out <- prob_fix(p0 = (1/(2*100)), Ne = 100, h = 0.5, s = 0.01)
typeof(pf_out)
pf_out[1]
pf_out[2]
pf_out[3]
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
Ne_array <- [1:100]
Ne_array <- 1:100
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
Ne_new <- seq(1,100,1)
s_new <-
s_new <- seq(1,10,0.1)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
Ne_new <- seq(0,100,1)
s_new <- seq(0,10,0.1)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
Ne_new <- seq(0,100,1)
s_new <- seq(0,10,0.1)
Ne_new <- seq(0,100,1)
s_new <- seq(0,10,0.1)
prob_fix_integral(p0 = (1/(2*100)) , Ne = Ne_new, s = s_new, h = 0.001)
prob_fix_integral(p0 = (1/(2*100)) , Ne = 100, s = 0.1, h = 0.001)
(0.8**2)*0.9
2*0.8*0.2
(0.2**2)*0.6
0.576 + 0.32 + 0.024
0.9+0.8
0.8/1.7
2 - 0.9 - 0.8
0.2/0.3
2/3
2-0.9-0.6
.4/.5
0.25*1 + 0.5*0.95 + 0.25*0.9
1 + 0.5 + 1/3 + 1/4
4/2.08
7/2.08
21/6
3.5/1000
knitr::opts_chunk$set(echo = TRUE, eval = T)
library(coala)
library(scrm)
library(ape)
list_simulators()
sum_stats <- scrm("4 2 -t 5")
sum_stats
sum_stats <- scrm("10 5 -t 0.5")
sum_stats
sum_stats2 <- scrm('10 1 -r 0 100 -t 1.5 -T -L -oSFS')
str(sum_stats2)
sum_stats2
sum_stats2$seg_sites
sum_stats2$trees # not so useful yet...
sum_stats2$tmrca
sum_stats2$sfs
?scrm
sum_stats2 <- scrm('10 10 -r 0 100 -t 1.5 -T -L -oSFS')
str(sum_stats2)
sum_stats2
sum_stats2$seg_sites
sum_stats2$trees # not so useful yet...
sum_stats2$tmrca
mean_tmrca <- mean(tmrca_values)
variance_tmrca <- var(tmrca_values)
mean_tmrca
tmrca_values <- c(0.5092537, 1.873118, 0.1969917, 1.551757, 0.7353524, 0.8773538, 0.6666408, 1.316378, 0.7148051, 0.5028803)
mean_tmrca <- mean(tmrca_values)
variance_tmrca <- var(tmrca_values)
mean_tmrca
variance_tmrca
sum_stats3 <- scrm('10 5 -r 0 100 -t 3 -T')
sum_stats3$trees
trees <- read.tree(text = paste0(sum_stats3$trees))
trees
plot(trees, no.margin = TRUE)
sum_stats3 <- scrm('10 5 -r 0 100 -t 3 -T')
sum_stats3$trees
trees <- read.tree(text = paste0(sum_stats3$trees))
trees
plot(trees, no.margin = TRUE)
sum_stats3$tmrca
sum_stats3 <- scrm('10 5 -r 0 100 -t 3 -T -L')
sum_stats3$trees
trees <- read.tree(text = paste0(sum_stats3$trees))
trees
plot(trees, no.margin = TRUE)
sum_stats3$tmrca
vignette("coala-intro")
mod1 <- coal_model(sample_size = 10,
loci_number = 1,
loci_length = 10000)
mod1 <- coal_model(sample_size = 10,
loci_number = 1,
loci_length = 10000)
mod1
mod1 <- coal_model(sample_size = 10,
loci_number = 1,
loci_length = 10000) +
feat_mutation(rate = 20) + # mutation rate is per locus, not per site. So the loci_length matters
sumstat_nucleotide_div() + sumstat_sfs() + sumstat_tajimas_d() + sumstat_trees()
mod1 # just the code it produces for scrm
mod1_sum <- simulate(mod1)
mod1_sum
mod1_sum$pi
mod1_sum$sfs
mod1_sum$tajimas_d
mod1_sum <- simulate(mod1)
mod1_sum
mod1_sum$pi / 10000
mod1_sum$sfs
mod1_sum$tajimas_d
N <- 10
k <- 10
mean_tmrca <- (4*N) / (k*(k-1))
variance_tmrca <- 16*N**2/(k*(k-1))**2
mean_tmrca
variance_tmrca
mod1_sum$pi / 10000
mod1_sum$sfs
mod1_sum$tajimas_d / 10000
mod1_sum$tajimas_d
mod1_sum <- simulate(mod1)
mod1_sum
mod1_sum$pi / 10000
mod1_sum$sfs
mod1_sum$tajimas_d
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
mod1_sum <- simulate(mod1)
mod1_sum
mod1_sum$pi / 10000
mod1_sum <- simulate(mod1)
mod1_sum
mod1_sum$pi / 10000
mod1_sum <- simulate(mod1)
mod1_sum
mod1_sum$pi / 10000
mod1_sum <- simulate(mod1)
mod1_sum
mod1_sum$pi / 10000
mod1_sum <- simulate(mod1)
mod1_sum
mod1_sum$pi / 10000
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
mod1
mod1_sum
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
par(mfrow = c(2,2))
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
trees <- read.tree(text = paste0(mod1_sum$trees))
trees
plot(trees, no.margin = FALSE)
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
trees <- read.tree(text = paste0(mod1_sum$trees))
trees
plot(trees, no.margin = FALSE)
dev.off()
trees <- read.tree(text = paste0(mod1_sum$trees))
trees
plot(trees, no.margin = FALSE)
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
barplot(mod1_sum$sfs / sum(mod1_sum$sfs),
names.arg = seq_along(mod1_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
mod_grow <- coal_model(sample_size = 40,
loci_number = 1,
loci_length = 10000) +
feat_growth(rate = 5, time = 0) +  # population size is growing "forward" in time
feat_growth(rate = 0, time = 1) +  # population size is constant prior to this
feat_mutation(rate = 20) +
sumstat_nucleotide_div() + sumstat_sfs() + sumstat_tajimas_d() + sumstat_trees()
mod_grow_sum <- simulate(mod_grow)
trees_grow <- read.tree(text = paste0(mod_grow_sum$trees))
plot(trees_grow , no.margin = FALSE)
#mod_grow_sum
mod_grow_sum$pi
mod_grow_sum$sfs
mod_grow_sum$tajimas_d
hist(mod_grow_sum$tajimas_d)
abline(v = 0, lty = 2)
mean(mod_grow_sum$tajimas_d) # average D
barplot(mod_grow_sum$sfs / sum(mod_grow_sum$sfs),
names.arg = seq_along(mod_grow_sum$sfs),
xlab = "count segregating sites",
ylab = "frequency",
col = 3)
setwd("~/Desktop/4c12_distance_plots")
###IMPORTING THE TAB DELIM FILES FOR 1000 DISTANCES
df_1000_im0_ii1 <- read.delim("1000_distances_plots/1000_distances_im0_ii1.txt", header = FALSE)
df_1000_im1_ii1 <- read.delim("1000_distances_plots/1000_distances_im1_ii1.txt", header = FALSE)
col_1000 <- c(1:1000)
df_1000_im0_ii1 <- cbind(df_1000_im0_ii1, col_1000)
df_1000_im1_ii1 <- cbind(df_1000_im1_ii1, col_1000)
### GRAPHING THE SHIT
library(ggplot2)
### 1000 Distances, IM0 II1
ggplot(df_1000_im0_ii1, aes(x=col_1000, y=V5)) +
geom_point(color="red") +
xlab("Iteration") +
ylab("Distance") +
ggtitle("Mutation Rate 0 Indel Rate 1")
### 1000 Distances, IM1 II1
ggplot(df_1000_im1_ii1, aes(x=col_1000, y=V5)) +
geom_point(color="red") +
xlab("Iteration") +
ylab("Distance") +
ggtitle("Mutation Rate 1 Indel Rate 1")
### GRAPHING THE SHIT
library(ggplot2)
theme_set(theme_pubr())
### 1000 Distances, IM0 II1
ggplot(df_1000_im0_ii1, aes(x=col_1000, y=V5)) +
geom_point(color="red") +
xlab("Iteration") +
ylab("Distance") +
ggtitle("Mutation Rate 0 Indel Rate 1")
### GRAPHING THE SHIT
library(ggplot2)
library(ggpubr)
theme_set(theme_pubr())
### 1000 Distances, IM0 II1
ggplot(df_1000_im0_ii1, aes(x=col_1000, y=V5)) +
geom_point(color="red") +
xlab("Iteration") +
ylab("Distance") +
ggtitle("Mutation Rate 0 Indel Rate 1")
### 1000 Distances, IM1 II1
ggplot(df_1000_im1_ii1, aes(x=col_1000, y=V5)) +
geom_point(color="red") +
xlab("Iteration") +
ylab("Distance") +
ggtitle("Mutation Rate 1 Indel Rate 1")
### 1000 Distances, IM0 II1
x <- ggplot(df_1000_im0_ii1, aes(x=col_1000, y=V5)) +
geom_point(color="red") +
xlab("Iteration") +
ylab("Distance") +
ggtitle("Mutation Rate 0 Indel Rate 1")
### 1000 Distances, IM1 II1
y <- ggplot(df_1000_im1_ii1, aes(x=col_1000, y=V5)) +
geom_point(color="red") +
xlab("Iteration") +
ylab("Distance") +
ggtitle("Mutation Rate 1 Indel Rate 1")
ggarrange(x,y)
jpeg("distances.jpeg", units="in", width=12, height=6, res=300)
ggarrange(x,y)
dev.off()
